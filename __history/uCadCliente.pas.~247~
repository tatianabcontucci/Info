unit uCadCliente;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, ComCtrls, Buttons, Grids, DBGrids, StdCtrls, Mask, uDMCliente;

type
  TfrmCliente = class(TForm)
    pnlTitulo: TPanel;
    Panel2: TPanel;
    pgGeral: TPageControl;
    tbListagem: TTabSheet;
    DBGrid1: TDBGrid;
    pnlFiltro: TPanel;
    tbCadastro: TTabSheet;
    pnlCadastro: TPanel;
    Bevel1: TBevel;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    btPesquisar: TSpeedButton;
    edtNome: TEdit;
    edtIdentidade: TMaskEdit;
    edtCPF: TMaskEdit;
    edtDDD: TEdit;
    edtFone: TEdit;
    edtEmail: TEdit;
    edtCodigo: TEdit;
    GroupBox2: TGroupBox;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    edtComplemento: TEdit;
    edtBairro: TEdit;
    edtLogradouro: TEdit;
    edtNumero: TEdit;
    edtCidade: TEdit;
    edtEstado: TEdit;
    edtPais: TEdit;
    edtCep: TMaskEdit;
    Panel1: TPanel;
    btIncluir: TSpeedButton;
    btEditar: TSpeedButton;
    btSalbar: TSpeedButton;
    btExcluir: TSpeedButton;
    btlimparTela: TSpeedButton;
    Label14: TLabel;
    Edit1: TEdit;
    Edit3: TEdit;
    Label16: TLabel;
    Edit2: TEdit;
    Label15: TLabel;
    procedure FormShow(Sender: TObject);
    procedure btIncluirClick(Sender: TObject);
    procedure btEditarClick(Sender: TObject);
    procedure btSalbarClick(Sender: TObject);
    procedure btlimparTelaClick(Sender: TObject);
    procedure btAtualizarClick(Sender: TObject);
    procedure btExcluirClick(Sender: TObject);
  private
    { Private declarations }
    procedure LimparCampos;
    procedure HabilitarDesabilitarCampos(const pHabilitaDesabilita: Boolean);
    procedure SalvarCliente;
    function RemoverCaracterRGCPF(const pTexto: String): String;
  public
    { Public declarations }
  end;

var
  frmCliente: TfrmCliente;

implementation

{$R *.dfm}

procedure TfrmCliente.FormShow(Sender: TObject);
begin
  LimparCampos;
  HabilitarDesabilitarCampos(False);
  edtCodigo.Enabled := False;
  pgGeral.ActivePage := tbListagem;
end;

procedure TfrmCliente.LimparCampos;
begin
 edtNome.Clear;
 edtIdentidade.Clear;
 edtCPF.Clear;
 edtDDD.Clear;
 edtFone.Clear;
 edtEmail.Clear;
 edtCep.Clear;
 edtLogradouro.Clear;
 edtNome.Clear;
 edtComplemento.Clear;
 edtBairro.Clear;
 edtCidade.Clear;
 edtEstado.Clear;
 edtPais.Clear;
 edtCodigo.Clear;
 btIncluir.Tag := 0;
 btEditar.Tag := 0;
end;

procedure TfrmCliente.btIncluirClick(Sender: TObject);
begin
  LimparCampos;
  HabilitarDesabilitarCampos(True);
  btEditar.Enabled := False;
  btExcluir.Enabled := False;
  btIncluir.Tag := 1;
  if dmCliente.cdsCliente.RecordCount > 0 then
  begin
      dmCliente.cdsCliente.Last;
      edtCodigo.Text := IntToStr(dmCliente.cdsClienteCodCliente.AsInteger + 1);
  end
  else
    edtCodigo.Text := '1';

  edtNome.SetFocus;
end;

procedure TfrmCliente.btAtualizarClick(Sender: TObject);
begin
  dmCliente.cdsCliente.Open;
  dmCliente.cdsCliente.First;
end;

procedure TfrmCliente.btEditarClick(Sender: TObject);
begin
  LimparCampos;
  HabilitarDesabilitarCampos(True);
  btExcluir.Enabled := False;
  btIncluir.Enabled := False;
  btIncluir.Tag := 0;
  btEditar.Tag := 1;
  edtNome.SetFocus;
end;

procedure TfrmCliente.btExcluirClick(Sender: TObject);
begin
  dmCliente.cdsCliente.Locate('CodCliente', StrToCurr(edtCodigo.Text), []);
  dmCliente.cdsCliente.Delete;

end;

procedure TfrmCliente.btlimparTelaClick(Sender: TObject);
begin
  LimparCampos;
  HabilitarDesabilitarCampos(False);
  btEditar.Enabled := True;
  btExcluir.Enabled := True;
  btIncluir.Enabled := True;
end;

procedure TfrmCliente.btSalbarClick(Sender: TObject);
begin
  if edtNome.Text = EmptyStr then
  begin
    Showmessage('Preencha o campo "Nome do Cliente"');
    edtNome.SetFocus;
  end;
  SalvarCliente;

  btEditar.Enabled := True;
  btExcluir.Enabled := True;
  btIncluir.Enabled := True;
  HabilitarDesabilitarCampos(False);
end;

procedure TfrmCliente.HabilitarDesabilitarCampos(const pHabilitaDesabilita: Boolean);
begin
  edtNome.Enabled := pHabilitaDesabilita;
  edtIdentidade.Enabled := pHabilitaDesabilita;
  edtCPF.Enabled := pHabilitaDesabilita;
  edtDDD.Enabled := pHabilitaDesabilita;
  edtFone.Enabled := pHabilitaDesabilita;
  edtEmail.Enabled := pHabilitaDesabilita;
  edtCep.Enabled := pHabilitaDesabilita;
  edtLogradouro.Enabled := pHabilitaDesabilita;
  edtNumero.Enabled := pHabilitaDesabilita;
  edtComplemento.Enabled := pHabilitaDesabilita;
  edtBairro.Enabled := pHabilitaDesabilita;
  edtCidade.Enabled := pHabilitaDesabilita;
  edtEstado.Enabled := pHabilitaDesabilita;
  edtEmail.Enabled := pHabilitaDesabilita;
end;

procedure TfrmCliente.SalvarCliente;
var
  vCodigo: Integer; 
begin
  if btIncluir.Tag = 1 then
  begin
    dmCliente.cdsCliente.Append;
    dmCliente.cdsClienteCodCliente.AsInteger := StrToInt(edtCodigo.Text);
  end
  else
  begin
    dmCliente.cdsCliente.Edit;
    dmCliente.cdsCliente.Locate('CodCliente', StrToCurr(edtCodigo.Text), []);
  end;

  try

    dmCliente.cdsClienteNome.AsString := edtNome.Text;
    dmCliente.cdsClienteRG.AsString := RemoverCaracterRGCPF(edtIdentidade.Text);
    dmCliente.cdsClienteCPF.AsString := RemoverCaracterRGCPF(edtCPF.Text);
    dmCliente.cdsClienteDDD.AsString := edtDDD.Text;
    dmCliente.cdsClientetelefone.AsString := edtFone.Text;
    dmCliente.cdsClienteemail.AsString := edtEmail.Text;
    dmCliente.cdsClientecep.AsString := edtCep.Text;
    dmCliente.cdsClienteLogradouro.AsString := edtLogradouro.Text;
    dmCliente.cdsClienteNumero.AsString := edtNumero.Text;
    dmCliente.cdsClienteComplemento.AsString := edtComplemento.Text;
    dmCliente.cdsClienteBairro.AsString := edtBairro.Text;
    dmCliente.cdsClienteCidade.AsString := edtCidade.Text;
    dmCliente.cdsClienteEstado.AsString := edtEstado.Text;
    dmCliente.cdsClientePais.AsString := edtPais.Text;
    dmCliente.cdsCliente.Post;
  finally
    btIncluir.Tag := 0;
  end;
end;

function TfrmCliente.RemoverCaracterRGCPF(const pTexto: String): String;
var
  vCaracter: String;
  vTexto: String;
  i: Integer;
Begin
  if pTexto = EmptyStr then
    Exit;
    
  vCaracter := '-.';
  vTexto := StringReplace(pTexto, '-', '', [rfReplaceAll]);
  vTexto := StringReplace(pTexto, '.', '', [rfReplaceAll]);

  Result := Trim(vTexto);
end;

end.
